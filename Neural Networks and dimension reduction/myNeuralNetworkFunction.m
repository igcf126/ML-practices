function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Apr-2022 21:50:00.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [9;70;46;1613;8.5;70;1];
x1_step1.gain = [0.0561797752808989;0.00519480519480519;0.0108695652173913;0.000567054153671676;0.122699386503067;0.166666666666667;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.5897891965089987476;4.4864401867150149883;-49.136147587091187461;0.63531340383206147404];
IW1_1 = [-4.4100468074848411248 -1.4198026743002210015 1.3958043599411444902 2.6893596612511605493 -3.611364347339727221 1.7831535191452783096 0.40067896179673445634;0.082683632922934707787 3.6777160210972215104 -1.7602704199969216869 -0.76745090843782626244 0.50930910484965474794 -0.77882446265463023405 -1.6756550098617570832;92.368977892327635004 -88.548719976866209436 100.17048105062274033 -192.12187101101804387 -9.3836810398972190228 43.374784073646068805 -108.05740252395938228;-0.54670434014559710079 1.4236661054007651028 0.33151482339171511882 0.54645666204582576952 -0.34281544551477938221 0.15214826333599579256 0.28078430288419120586];

% Layer 2
b2 = -0.14746570563437605417;
LW2_1 = [-0.19599321094248919883 0.32956524034702572301 0.11479171682896048556 1.1914707843499399154];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.4;
y1_step1.xoffset = 3;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
