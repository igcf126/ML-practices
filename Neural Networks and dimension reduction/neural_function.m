function [y1] = neural_function(x1)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Apr-2022 18:57:40.
% 
% [y1] = neural_function(x1) takes these arguments:
%   x = 8xQ matrix, input #1
% and returns:
%   y = 8xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [9;3;68;46;1613;8;70;1];
x1_step1.gain = [0.0265957446808511;0.2;0.00258397932816537;0.00543478260869565;0.000283527076835838;0.0595238095238095;0.0833333333333333;0.5];
x1_step1.ymin = 0;

% Layer 1
b1 = [-0.58669050467434724627;4.7433142107438861501];
IW1_1 = [-0.053127718240473652267 0.0021024611472599992468 -0.007798252900564462721 -0.10916569357896198367 -5.7011466786137434681 0.0037299673004768554678 0.013937050594608467805 0.0075394395306752348684;0.073853313044301996393 0.010783518503157707089 -0.15840253439978468908 0.088342639056286642596 -4.3245717588824446054 -0.028384588778232272555 -0.002564495989188938195 -0.0098323324675800016781];

% Layer 2
b2 = [-2.0958919982056345432;0.043514508550036246071;7.0664045920726819006;5.6494357433973840799;7.7020936814347997768;-0.35950527486110811504;-0.18141558120670600585;-0.16990025997028507243];
LW2_1 = [3.7405438257577068306 1.3872627665210530701;-0.17041740961667670162 -0.11927138920873645023;-12.812172995624687033 -7.4356074884321783358;-5.2362507985823354417 -6.467075697644528276;-8.3724680734150460637 -8.0437123074448582116;0.34363332126227419394 0.14929377350748979092;0.22248936606611927069 0.193011280059713769;0.0072211595230526849296 -0.13837998713755383928];

% Output 1
y1_step1.ymin = 0;
y1_step1.gain = [0.0265957446808511;0.2;0.00258397932816537;0.00543478260869565;0.000283527076835838;0.0595238095238095;0.0833333333333333;0.5];
y1_step1.xoffset = [9;3;68;46;1613;8;70;1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = logsig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
  a = 1 ./ (1 + exp(-n));
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
