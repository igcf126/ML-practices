clear
clc

% Se leen los datos del csv y se aleatoriza para prevenir cualquier
% influencia por un orden que se desconozca.

data = readtable("cardio_train.csv"); % "Data" porque son los datos que nos dan
dataset = data(randperm(length(data.id)), :); % "Dataset" porque son los datos con los que trabajaremos

% Se ha decidido por tomar un 70 % de los datos para el entrenamiento del
% programa, para as[i poner a prueba el otro 30 % del dataset.

traindata = dataset(1:length(dataset.id)*0.7, :);
testdata = dataset(1:length(dataset.id)*0.3, :);

clear data
clear dataset

%% Priors, características y likelihoods

% Para conocer el prior de los enfermos en el dataset, se extrae su
% proporción en base a los datos de prueba.

prior = [sum(traindata.cardio==0) sum(traindata.cardio==1)]./length(traindata.cardio);
PC1 = prior(2)

sanos = traindata(traindata.cardio==0, :);
enfermos = traindata(traindata.cardio==1, :);

likeSano = [mean(sanos.age) std(sanos.age); mean(sanos.height) std(sanos.height); mean(sanos.weight) std(sanos.weight)];
likeEnfermo = [mean(enfermos.age) std(enfermos.age); mean(enfermos.height) std(enfermos.height); mean(enfermos.weight) std(enfermos.weight)];

%% Gráfico de la edad de las personas enfermas versus su estimación
figure
edadEnfermoEstimado = normrnd(likeEnfermo(1, 1), likeEnfermo(1,2), [length(enfermos.id) 1]);
histogram(enfermos.age)
hold on
histogram(edadEnfermoEstimado)

title("Edad de las personas enfermas")
legend ("Datos reales", "Modelo estimado")
xlabel("Edad (días)")
ylabel("Cantidad de enfermos")

clear edadEnfermoEstimado

%% Gráfico de la altura de las personas enfermas versus su estimación
figure
alturaEnfermoEstimado = normrnd(likeEnfermo(2, 1), likeEnfermo(2,2), [length(enfermos.id) 1]);
histogram(enfermos.height)
hold on
histogram(alturaEnfermoEstimado)

title("Altura de las personas enfermas")
legend ("Datos reales", "Modelo estimado")
xlabel("Altura (cm)")
ylabel("Cantidad de enfermos")

clear alturaEnfermoEstimado

%% Gráfico del peso de las personas enfermas versus su estimación
figure
pesoEnfermoEstimado = normrnd(likeEnfermo(3, 1), likeEnfermo(3,2), [length(enfermos.id) 1]);
histogram(enfermos.weight)
hold on
histogram(pesoEnfermoEstimado)

title("Peso de las personas enfermas")
legend ("Datos reales", "Modelo estimado")
xlabel("Peso (kg)")
ylabel("Cantidad de enfermos")

clear pesoEnfermoEstimado

%%

%% Gráfico de la edad de las personas sanas versus su estimación
figure
edadSanoEstimado = normrnd(likeSano(1, 1), likeSano(1,2), [length(sanos.id) 1]);
histogram(sanos.age)
hold on
histogram(edadSanoEstimado)

title("Edad de las personas sanas")
legend ("Datos reales", "Modelo estimado")
xlabel("Edad (días)")
ylabel("Cantidad de sanos")

clear edadSanoEstimado

%% Gráfico de la altura de las personas sanas versus su estimación
figure
alturaSanoEstimado = normrnd(likeSano(2, 1), likeSano(2,2), [length(sanos.id) 1]);
histogram(sanos.height)
hold on
histogram(alturaSanoEstimado)

title("Altura de las personas sanas")
legend ("Datos reales", "Modelo estimado")
xlabel("Altura (cm)")
ylabel("Cantidad de enfermos")

clear alturaSanoEstimado

%% Gráfico del peso de las personas sanas versus su estimación
figure
pesoSanoEstimado = normrnd(likeSano(3, 1), likeSano(3,2), [length(sanos.id) 1]);
histogram(sanos.weight)
hold on
histogram(pesoSanoEstimado)

title("Peso de las personas sanas")
legend ("Datos reales", "Modelo estimado")
xlabel("Peso (kg)")
ylabel("Cantidad de sanos")

clear pesoSanoEstimado


%% 1.4 Evidencia de cada característica

pEdad = [mean(traindata.age) std(traindata.age)]./length(traindata.age);
pAltura = [mean(traindata.height) std(traindata.height)]./length(traindata.height);
pPeso = [mean(traindata.weight) std(traindata.weight)]./length(traindata.weight);

pdfEdad = pdf('Normal', testdata.age, pEdad(1), pEdad(2)); % p(x) / x = Edad
pdfAltura = pdf('Normal', testdata.height, pAltura(1), pAltura(2));  % p(x) / x = altura
pdfPeso = pdf('Normal', testdata.weight, pPeso(1), pPeso(2));  % p(x) / x = Peso

fprintf("Naive Bayes con la edad: ")

% Variables para la matriz de confusión
tp = zeros(3,1); % True positives, donde "positive" representa que sufre de una enfermedad
tn = zeros(3,1); % True negatives
fp = zeros(3,1); % False positives
fn = zeros(3,1); % False negatives

predictionEdad = nan(length(testdata.id), 1);

predictionAltura = nan(length(testdata.id), 1);

predictionPeso = nan(length(testdata.id), 1);

testdata = [testdata table(predictionEdad) table(predictionAltura) table(predictionPeso)];

clear predictionEdad predictionAltura predictionPeso

cont = 0; 


%% Clasificación de datos utilizando la edad como variable independiente
%for k = 1:3 % 1 para edad, 2 para altura y 3 para peso
    for j = 1:length(testdata.id); % Repeticiones hasta la cantidad de personas en el test 
        % Funciones discriminantes
        gSanos = -0.5*log(2*pi)-log(likeSano(1, 2))-(testdata.age(j)-likeSano(1,1))^2/(2*likeSano(1, 2))+log(prior(1));
        gEnfermos = -0.5*log(2*pi)-log(likeEnfermo(1, 2))-(testdata.age(j)-likeEnfermo(1,1))^2/(2*likeEnfermo(1, 2))+log(prior(1)); 
        
        if gSanos > gEnfermos 
           estado = 0; % Persona sana 
        else
            estado = 1; % Persona no sana 
        end
        
        predictionEdad.predictionEdad(j) = estado;

        if estado == testdata.cardio(j)
            cont = cont + 1;
            if estado == 0
                tp(1) = tp(1) + 1;
            else
                tn(1) = tn(1) + 1;
            end
        else
            if estado == 0
                fp(1) = fp(1) + 1;
            else
                fn(1) = fn(1) + 1;
            end
            
        end   
    end
%end

%% Clasificación de datos utilizando la altura como variable independiente
for j = 1:length(testdata.id); % Repeticiones hasta la cantidad de personas en el test 
        % Funciones discriminantes
        gSanos = -0.5*log(2*pi)-log(likeSano(2, 2))-(testdata.height(j)-likeSano(2,1))^2/(2*likeSano(2, 2))+log(prior(1));
        gEnfermos = -0.5*log(2*pi)-log(likeEnfermo(2, 2))-(testdata.height(j)-likeEnfermo(2,1))^2/(2*likeEnfermo(2, 2))+log(prior(1)); 
        
        if gSanos > gEnfermos 
           estado = 0; % Persona sana 
        else
            estado = 1; % Persona no sana 
        end
        
        predictionAltura.predictionAltura(j) = estado;

        if estado == testdata.cardio(j)
            cont = cont + 1;
            if estado == 0
                tp(2) = tp(2) + 1;
            else
                tn(2) = tn(2) + 1;
            end
        else
            if estado == 0
                fp(2) = fp(2) + 1;
            else
                fn(2) = fn(2) + 1;
            end
            
        end   
    end

%% Clasificación de datos utilizando el peso como variable independiente
for j = 1:length(testdata.id); % Repeticiones hasta la cantidad de personas en el test 
        % Funciones discriminantes
        gSanos = -0.5*log(2*pi)-log(likeSano(3, 2))-(testdata.weight(j)-likeSano(3,1))^2/(2*likeSano(3, 2))+log(prior(1));
        gEnfermos = -0.5*log(2*pi)-log(likeEnfermo(3, 2))-(testdata.weight(j)-likeEnfermo(3,1))^2/(2*likeEnfermo(3, 2))+log(prior(1)); 
        
        if gSanos > gEnfermos 
           estado = 0; % Persona sana 
        else
            estado = 1; % Persona no sana 
        end
        
        predictionPeso.predictionPeso(j) = estado;        

        if estado == testdata.cardio(j)
            cont = cont + 1;
            if estado == 1
                tp(3) = tp(3) + 1;
            else
                tn(3) = tn(3) + 1;
            end
        else
            if estado == 1
                fp(3) = fp(3) + 1;
            else
                fn(3) = fn(3) + 1;
            end
            
        end   
    end

ptp = tp/length(testdata.id)
ptn = tn/length(testdata.id)
pfp = fp/length(testdata.id)
pfn = fn/length(testdata.id)

aciertos = ptp+ptn;



%%
%% Uso de peso y altura como features

pesoAlturaSano = [sanos.weight(:) sanos.height(:)];% Matriz con peso y altura, no enfermos
pesoAlturaEnfermo = [enfermos.weight(:) enfermos.height(:)];% Matriz con peso y altura, enfermos

covSano = cov(pesoAlturaSano);
covEnfermo = cov(pesoAlturaEnfermo);

meanSano = mean(pesoAlturaSano)';
meanEnfermo = mean(pesoAlturaEnfermo)';

PesAltTest = [testdata.weight(:) testdata.height(:)];



%%

% Distribución multivariable

% px1 =  mvnpdf(pesoAlturaEnfermo, meanEnfermo, covEnfermo);
% y = mvnpdf(pesoAlturaEnfermo,meanEnfermo,covEnfermo)

figure 
% y = reshape(y,length(pesoAlturaEnfermo(:,1)),length(pesoAlturaEnfermo(:,2)));

%AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA



%%

WSano = -0.5*inv(covSano);
WEnfermo = -0.5*inv(covEnfermo);

wSano = inv(covSano)*meanSano;
wEnfermo = inv(covEnfermo)*meanEnfermo;

w0Sano = -0.5*meanSano'*inv(covSano)*meanSano - 0.5*log(det(covSano)) + log(prior(1));
w0Enfermo = -0.5*meanEnfermo'*inv(covEnfermo)*meanEnfermo-0.5*log(det(covEnfermo))+log(prior(2));

%%
cont = 0;
for i = 1:length(testdata.id)
    sano = PesAltTest(i,:)*WSano*PesAltTest(i,:)' + wSano'*PesAltTest(i,:)'+w0Sano;
    enfermo = PesAltTest(i,:)*WEnfermo*PesAltTest(i,:)' + wEnfermo'*PesAltTest(i,:)'+w0Enfermo;
    
    if sano > enfermo
        estado = 0;% estado de la persona es no enferma
    else
        estado = 1;% estado de la persona es enferma
    end
    
    % Verificación si la persona está sana o no
    
    if estado == testdata.cardio(i)
        cont = cont + 1;
    end

end

aciertosMultVar = cont/length(testdata.id)



%% Naive Bayes asumiendo que las variables son independientes
carSano = [sanos.age(:) sanos.weight(:) sanos.weight(:)]; % Matriz con peso y altura, no enfermos
carEnfermo = [enfermos.age(:) enfermos.height(:) enfermos.weight(:)]; % Matriz con peso y altura, enfermos

meanSano = mean(carSano);
meanEnfermo = mean(carEnfermo);

DesEstSano = std(carSano)
DesEstEnfermo = std(carEnfermo)

cont = 0;
for i = 1:length(testdata.id)
    X = [testdata.age(i) testdata.height(i) testdata.weight(i)];
    sano = -0.5*sum((X-meanSano)./DesEstSano)^2+log(prior(1));
    enfermo = -0.5*sum((X-meanEnfermo)./DesEstEnfermo)^2+log(prior(2));
    
    if sano > enfermo
        estado = 0;% Persona no está enferma
    else
        estado = 1;% Persona está enferma
    end
    
    if estado == testdata.cardio(i)
        cont = cont + 1;
    end
end

aciertosNaiveIndep = cont/length(testdata.id)


%% Naive Bayes asumiendo que las variables son dependientes

covSano = cov(carSano);
covEnfermo = cov(carEnfermo);

NaiveTest = [testdata.age(:) testdata.weight(:) testdata.weight(:)];

WSano = -0.5*inv(covSano);
WEnfermo = -0.5*inv(covEnfermo);

wSano = inv(covSano)*meanSano;
wEnfermo = inv(covEnfermo)*meanEnfermo;

w0Sano = -0.5*meanSano'*inv(covSano)*meanSano - 0.5*log(det(covSano)) + log(prior(1));
w0Enfermo = -0.5*meanEnfermo'*inv(covEnfermo)*meanEnfermo-0.5*log(det(covEnfermo))+log(prior(2));


cont = 0;
for i = 1:length(testdata.id)
    sano = NaiveTest(i,:)*WSano*NaiveTest(i,:)' + wSano'*PesAltTest(i,:)'+w0Sano;
    enfermo = NaiveTest(i,:)*WEnfermo*PesAltTest(i,:)' + wEnfermo'*PesAltTest(i,:)'+w0Enfermo;
    
    if sano > enfermo
        estado = 0;% Persona no está enferma
    else
        estado = 1;% Persona está enferma
    end
    
    if estado == testdata.cardio(i)
        cont = cont + 1;
    end
end
aciertosNaiveDep = cont/length(testdata.id)
